/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package application.view;

import application.Mask;
import application.Moment;
import application.controller.ClienteDAO;
import application.controller.OrdemDAO;
import application.model.ClienteModel;
import application.model.OrdemModel;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.CardLayout;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.sql.SQLException;
import java.util.Collections;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultRowSorter;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author guigi
 */
public class home extends javax.swing.JFrame {

    /**
     * Creates new form home
     */
    public home() {
        initComponents();
        this.setExtendedState(MAXIMIZED_BOTH);
        
        Mask.create(txtClienteCpf, "###.###.###-##");
        Mask.create(txtClienteRg, "##.###.###-#");
        Mask.create(txtClienteTelefone, "(##) #####-####");
        Mask.create(txtClienteTelefone2, "(##) #####-####");
        
        txtClienteId.setVisible(false);
        txtOSId.setVisible(false);
    }
    
    public String dataC, dataO = "";
    public HashMap<Integer, Integer> IDHolder = new HashMap<>();
    public HashMap<Integer, Integer> IDHolderR = new HashMap<>();
    public HashMap<String, Integer> IDHolderS = new HashMap<>();
    public HashMap<Integer, String> IDHolderSR = new HashMap<>();
    
    public void preenchertblClientes () throws SQLException {
        ClienteDAO cDAO = new ClienteDAO();
        DefaultTableModel tblCliente = (DefaultTableModel) tblClientes.getModel();

        tblClientes.setAutoCreateRowSorter(true);
        DefaultRowSorter sorter = ((DefaultRowSorter) tblClientes.getRowSorter()); 
        sorter.setSortKeys( Collections.singletonList (new RowSorter.SortKey(0, SortOrder.ASCENDING)) );
        sorter.sort();

        tblCliente.setRowCount(0);
        
        for (ClienteModel c : cDAO.listarClientes()) {
            Object[] row = {c.getId(), c.getNome(), c.getCpf(), c.getRg(), c.getEndereco(), c.getTelefone(), c.getTelefone_alternativo(), c.getData_cadastro()};
            tblCliente.addRow(row);
        }
    }
    
    public void preenchertblOS () throws SQLException {
        OrdemDAO oDAO = new OrdemDAO();
        DefaultTableModel tblOrdem = (DefaultTableModel) tblOrdens.getModel();
        
        tblOrdens.setAutoCreateRowSorter(true);
        DefaultRowSorter sorter = ((DefaultRowSorter) tblOrdens.getRowSorter()); 
        sorter.setSortKeys( Collections.singletonList (new RowSorter.SortKey(0, SortOrder.ASCENDING)) );
        sorter.sort();
        
        tblOrdem.setRowCount(0);
        
        for (OrdemModel o : oDAO.listarOrdens()) {
            Object[] row = { o.getId(), o.getNome(), o.getCliente(), o.getOrcamento(), o.getCaracteristicas(), o.getDefeitos(), o.getStatus(), o.getData_cadastro() };
            tblOrdem.addRow(row);
        }
    }
    
    public void preenchertxtOSCliente() throws SQLException {
        ClienteDAO cDAO = new ClienteDAO();
        
        int id = 0;
        txtOSCliente.removeAllItems();
        
        IDHolder = new HashMap<>();
        IDHolderR = new HashMap<>();
        IDHolderS = new HashMap<>();
        
        IDHolderS.put("Aguardando Autorização", 0);
        IDHolderS.put("Aguardando Diagnóstico", 1);
        IDHolderS.put("Entregue", 2);
        IDHolderS.put("Cancelado", 3);
        
        IDHolderSR.put(0, "Aguardando Autorização");
        IDHolderSR.put(1, "Aguardando Diagnóstico");
        IDHolderSR.put(2, "Entregue");
        IDHolderSR.put(3, "Cancelado");
        
        for (ClienteModel c : cDAO.listarClientes()) {
            txtOSCliente.addItem(c.getNome()); 
            IDHolder.put(id, Integer.parseInt(c.getId()));
            IDHolderR.put(Integer.parseInt(c.getId()), id);
            id++;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        inicio = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        listarClientes = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblClientes = new javax.swing.JTable();
        txtClienteNome = new javax.swing.JTextField();
        txtClienteCpf = new javax.swing.JFormattedTextField();
        jLabel4 = new javax.swing.JLabel();
        txtClienteRg = new javax.swing.JFormattedTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtClienteEndereco = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtClienteTelefone = new javax.swing.JFormattedTextField();
        jLabel9 = new javax.swing.JLabel();
        txtClienteTelefone2 = new javax.swing.JFormattedTextField();
        btnClienteCadastrar = new javax.swing.JButton();
        btnClieneAlterar = new javax.swing.JButton();
        btnClienteExcluir = new javax.swing.JButton();
        txtClienteId = new javax.swing.JLabel();
        btnClienteLimpar = new javax.swing.JButton();
        listarOS = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblOrdens = new javax.swing.JTable();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        txtOSNome = new javax.swing.JTextField();
        txtOSOrcamento = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtOSCaracteristicas = new javax.swing.JTextArea();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        txtOSStatus = new javax.swing.JComboBox<>();
        jLabel15 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtOSDefeitos = new javax.swing.JTextArea();
        btnOSCadastrar = new javax.swing.JButton();
        btnOSEditar = new javax.swing.JButton();
        btnOSExcluir = new javax.swing.JButton();
        btnOSImprimir = new javax.swing.JButton();
        btnOSLimpar = new javax.swing.JButton();
        txtOSId = new javax.swing.JLabel();
        txtOSCliente = new javax.swing.JComboBox<>();
        verOSCliente = new javax.swing.JPanel();
        verOS = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Ordem de Serviço - Home");

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/application/images/admin.png"))); // NOI18N

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Clique sobre Abas do Menu para Gerenciar");
        jLabel3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(64, 64, 64))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(77, 77, 77)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addContainerGap(448, Short.MAX_VALUE))
        );

        jPanel2.setLayout(new java.awt.CardLayout());

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/application/images/os.png"))); // NOI18N
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout inicioLayout = new javax.swing.GroupLayout(inicio);
        inicio.setLayout(inicioLayout);
        inicioLayout.setHorizontalGroup(
            inicioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inicioLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        inicioLayout.setVerticalGroup(
            inicioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, inicioLayout.createSequentialGroup()
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        jPanel2.add(inicio, "cardInicio");

        tblClientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nome", "CPF", "RG", "Endereço", "Telefone 1", "Telefone 2", "Data de Cadastro"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblClientes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblClientesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblClientes);
        if (tblClientes.getColumnModel().getColumnCount() > 0) {
            tblClientes.getColumnModel().getColumn(0).setPreferredWidth(5);
        }

        txtClienteNome.setName("txtClienteNome"); // NOI18N
        txtClienteNome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtClienteNomeActionPerformed(evt);
            }
        });

        txtClienteCpf.setName("txtClienteCpf"); // NOI18N

        jLabel4.setText("CPF");

        jLabel5.setText("RG");

        jLabel6.setText("Endereço");

        jLabel7.setText("Nome");

        jLabel8.setText("Telefone");

        txtClienteTelefone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtClienteTelefoneActionPerformed(evt);
            }
        });

        jLabel9.setText("Telefone 2");

        btnClienteCadastrar.setText("Cadastrar Novo");
        btnClienteCadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClienteCadastrarActionPerformed(evt);
            }
        });

        btnClieneAlterar.setText("Editar Selecionado");
        btnClieneAlterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClieneAlterarActionPerformed(evt);
            }
        });

        btnClienteExcluir.setText("Excluir Selecionado");
        btnClienteExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClienteExcluirActionPerformed(evt);
            }
        });

        btnClienteLimpar.setText("Limpar Campos");
        btnClienteLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClienteLimparActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout listarClientesLayout = new javax.swing.GroupLayout(listarClientes);
        listarClientes.setLayout(listarClientesLayout);
        listarClientesLayout.setHorizontalGroup(
            listarClientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1020, Short.MAX_VALUE)
            .addGroup(listarClientesLayout.createSequentialGroup()
                .addGroup(listarClientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(txtClienteCpf, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(listarClientesLayout.createSequentialGroup()
                        .addGroup(listarClientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel7))
                        .addGap(28, 28, 28)
                        .addComponent(txtClienteNome))
                    .addGroup(listarClientesLayout.createSequentialGroup()
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(txtClienteTelefone, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(66, 66, 66)
                .addGroup(listarClientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(listarClientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(listarClientesLayout.createSequentialGroup()
                            .addComponent(jLabel5)
                            .addGap(39, 39, 39))
                        .addGroup(listarClientesLayout.createSequentialGroup()
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                    .addGroup(listarClientesLayout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addGap(9, 9, 9)))
                .addGroup(listarClientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtClienteTelefone2)
                    .addComponent(txtClienteEndereco)
                    .addComponent(txtClienteRg))
                .addGap(112, 112, 112)
                .addComponent(txtClienteId)
                .addGap(225, 225, 225))
            .addGroup(listarClientesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnClienteCadastrar)
                .addGap(18, 18, 18)
                .addComponent(btnClieneAlterar)
                .addGap(18, 18, 18)
                .addComponent(btnClienteExcluir)
                .addGap(18, 18, 18)
                .addComponent(btnClienteLimpar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        listarClientesLayout.setVerticalGroup(
            listarClientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(listarClientesLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(listarClientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(listarClientesLayout.createSequentialGroup()
                        .addGroup(listarClientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtClienteNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(listarClientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtClienteCpf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)))
                    .addGroup(listarClientesLayout.createSequentialGroup()
                        .addGroup(listarClientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtClienteRg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)
                            .addComponent(txtClienteId))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(listarClientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(txtClienteEndereco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(listarClientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(listarClientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel9)
                        .addComponent(txtClienteTelefone2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(listarClientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel8)
                        .addComponent(txtClienteTelefone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(29, 29, 29)
                .addGroup(listarClientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnClienteCadastrar)
                    .addComponent(btnClieneAlterar)
                    .addComponent(btnClienteExcluir)
                    .addComponent(btnClienteLimpar))
                .addGap(0, 149, Short.MAX_VALUE))
        );

        jPanel2.add(listarClientes, "cardListarClientes");

        tblOrdens.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nome do Produto", "Cliente", "Orçamento", "Características", "Defeitos", "Status", "Data de Cadastro"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblOrdens.setName(""); // NOI18N
        tblOrdens.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblOrdensMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblOrdens);

        jLabel10.setText("Nome");

        jLabel11.setText("Orçamento");

        jLabel12.setText("Características");

        txtOSNome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtOSNomeActionPerformed(evt);
            }
        });

        txtOSOrcamento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtOSOrcamentoActionPerformed(evt);
            }
        });

        txtOSCaracteristicas.setColumns(20);
        txtOSCaracteristicas.setRows(5);
        jScrollPane3.setViewportView(txtOSCaracteristicas);

        jLabel13.setText("Cliente");

        jLabel14.setText("Status");

        txtOSStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Aguardando Autorização", "Aguardando Diagnóstico", "Entregue", "Cancelado" }));
        txtOSStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtOSStatusActionPerformed(evt);
            }
        });

        jLabel15.setText("Defeitos");

        txtOSDefeitos.setColumns(20);
        txtOSDefeitos.setRows(5);
        jScrollPane4.setViewportView(txtOSDefeitos);

        btnOSCadastrar.setText("Cadastrar OS");
        btnOSCadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOSCadastrarActionPerformed(evt);
            }
        });

        btnOSEditar.setText("Editar OS");
        btnOSEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOSEditarActionPerformed(evt);
            }
        });

        btnOSExcluir.setText("Excluir OS");
        btnOSExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOSExcluirActionPerformed(evt);
            }
        });

        btnOSImprimir.setText("Gerar Relatório OS");
        btnOSImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOSImprimirActionPerformed(evt);
            }
        });

        btnOSLimpar.setText("Limpar Campos");
        btnOSLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOSLimparActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout listarOSLayout = new javax.swing.GroupLayout(listarOS);
        listarOS.setLayout(listarOSLayout);
        listarOSLayout.setHorizontalGroup(
            listarOSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1020, Short.MAX_VALUE)
            .addGroup(listarOSLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(listarOSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(listarOSLayout.createSequentialGroup()
                        .addGroup(listarOSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel12)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(listarOSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtOSOrcamento)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 211, Short.MAX_VALUE)
                            .addComponent(txtOSNome))
                        .addGap(103, 103, 103)
                        .addGroup(listarOSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(listarOSLayout.createSequentialGroup()
                                .addGroup(listarOSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, listarOSLayout.createSequentialGroup()
                                        .addComponent(jLabel13)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                                    .addGroup(listarOSLayout.createSequentialGroup()
                                        .addComponent(jLabel14)
                                        .addGap(12, 12, 12)))
                                .addGroup(listarOSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtOSStatus, 0, 211, Short.MAX_VALUE)
                                    .addComponent(txtOSCliente, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(listarOSLayout.createSequentialGroup()
                                .addComponent(jLabel15)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE)))
                        .addGap(96, 96, 96)
                        .addComponent(txtOSId))
                    .addGroup(listarOSLayout.createSequentialGroup()
                        .addComponent(btnOSCadastrar)
                        .addGap(18, 18, 18)
                        .addComponent(btnOSEditar)
                        .addGap(18, 18, 18)
                        .addComponent(btnOSExcluir)
                        .addGap(18, 18, 18)
                        .addComponent(btnOSImprimir)
                        .addGap(18, 18, 18)
                        .addComponent(btnOSLimpar)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        listarOSLayout.setVerticalGroup(
            listarOSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(listarOSLayout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addGroup(listarOSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(txtOSNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13)
                    .addComponent(txtOSId)
                    .addComponent(txtOSCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(listarOSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(txtOSOrcamento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14)
                    .addComponent(txtOSStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(listarOSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel12)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE)
                    .addComponent(jLabel15)
                    .addComponent(jScrollPane4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addGroup(listarOSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnOSCadastrar)
                    .addComponent(btnOSEditar)
                    .addComponent(btnOSExcluir)
                    .addComponent(btnOSImprimir)
                    .addComponent(btnOSLimpar))
                .addGap(34, 34, 34))
        );

        jPanel2.add(listarOS, "cardListarOS");

        javax.swing.GroupLayout verOSClienteLayout = new javax.swing.GroupLayout(verOSCliente);
        verOSCliente.setLayout(verOSClienteLayout);
        verOSClienteLayout.setHorizontalGroup(
            verOSClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 680, Short.MAX_VALUE)
        );
        verOSClienteLayout.setVerticalGroup(
            verOSClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 528, Short.MAX_VALUE)
        );

        jPanel2.add(verOSCliente, "cardVerOSCliente");
        verOSCliente.getAccessibleContext().setAccessibleName("");

        javax.swing.GroupLayout verOSLayout = new javax.swing.GroupLayout(verOS);
        verOS.setLayout(verOSLayout);
        verOSLayout.setHorizontalGroup(
            verOSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 680, Short.MAX_VALUE)
        );
        verOSLayout.setVerticalGroup(
            verOSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 528, Short.MAX_VALUE)
        );

        jPanel2.add(verOS, "cardVerOS");

        jMenu3.setText("Início");

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem4.setText("Voltar ao Início");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem4);

        jMenuBar1.add(jMenu3);

        jMenu1.setText("Gerenciar");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Clientes");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setText("Ordem de Serviço");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Opções");

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem3.setText("Sair");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        CardLayout cVerClientes = (CardLayout) jPanel2.getLayout();
        cVerClientes.show(jPanel2, "cardListarClientes");
        
        try {
            preenchertxtOSCliente();
            preenchertblClientes();
            limparCampos();
            limparCamposOS();
        } catch (SQLException ex) {
            Logger.getLogger(home.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        CardLayout cVerOS = (CardLayout) jPanel2.getLayout();
        cVerOS.show(jPanel2, "cardListarOS");
        
        try {
            preenchertxtOSCliente();
            preenchertblOS();
            limparCampos();
            limparCamposOS();
        } catch (SQLException ex) {
            Logger.getLogger(home.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        login l = new login();
        l.setVisible(true);
        
        dispose();
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        CardLayout cInicio = (CardLayout) jPanel2.getLayout();
        cInicio.show(jPanel2, "cardInicio");
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void txtClienteTelefoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtClienteTelefoneActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtClienteTelefoneActionPerformed

    private void txtClienteNomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtClienteNomeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtClienteNomeActionPerformed

    private void tblClientesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblClientesMouseClicked
        txtClienteId.setText(tblClientes.getValueAt(tblClientes.getSelectedRow(), 0).toString());
        txtClienteNome.setText(tblClientes.getValueAt(tblClientes.getSelectedRow(), 1).toString());
        txtClienteCpf.setText(tblClientes.getValueAt(tblClientes.getSelectedRow(), 2).toString());
        txtClienteRg.setText(tblClientes.getValueAt(tblClientes.getSelectedRow(), 3).toString());
        txtClienteEndereco.setText(tblClientes.getValueAt(tblClientes.getSelectedRow(), 4).toString());
        txtClienteTelefone.setText(tblClientes.getValueAt(tblClientes.getSelectedRow(), 5).toString());
        txtClienteTelefone2.setText(tblClientes.getValueAt(tblClientes.getSelectedRow(), 6).toString());
        dataC = tblClientes.getValueAt(tblClientes.getSelectedRow(), 7).toString();
    }//GEN-LAST:event_tblClientesMouseClicked
    
    public void limparCampos() {
        txtClienteId.setText("");
        txtClienteNome.setText("");
        txtClienteCpf.setText("");
        txtClienteRg.setText("");
        txtClienteEndereco.setText("");
        txtClienteTelefone.setText("");
        txtClienteTelefone2.setText("");
        dataC = "";
    }
    
    public void limparCamposOS() {
        txtOSId.setText("");
        txtOSNome.setText("");
        txtOSCaracteristicas.setText("");
        txtOSOrcamento.setText("");
        txtOSDefeitos.setText("");
        txtOSCliente.setSelectedIndex(0);
        txtOSStatus.setSelectedIndex(0);
        dataO = "";
    }
    
    private boolean preenchidosCampos() {
        return !txtClienteNome.getText().equals("") && !txtClienteCpf.getText().equals("") && !txtClienteEndereco.getText().equals("") && !txtClienteRg.getText().equals("") && !txtClienteTelefone.getText().equals("") && !txtClienteTelefone2.getText().equals("");
    }
    
    private boolean preenchidosCamposOS() {
        return !txtOSNome.getText().equals("") && !txtOSCaracteristicas.getText().equals("") && !txtOSOrcamento.getText().equals("") && !txtOSDefeitos.getText().equals("");
    }
    
    private int getOSId() {
        return IDHolder.get(txtOSCliente.getSelectedIndex());
    }
    
    private int getOSIdPorCliente (int clienteId) {
        return IDHolderR.get(clienteId);
    }
    
    private void btnClienteLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClienteLimparActionPerformed
        limparCampos();
    }//GEN-LAST:event_btnClienteLimparActionPerformed

    private void btnClienteExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClienteExcluirActionPerformed
        String id = txtClienteId.getText();
        if (!id.equals("")) {
            try {
                ClienteDAO cDAO = new ClienteDAO();
                int result = cDAO.apagarClientes(id);
                
                if (result > 0) {
                    DefaultTableModel tblCliente = (DefaultTableModel) tblClientes.getModel();
                    
                    tblCliente.removeRow(tblClientes.getSelectedRow());
                    limparCampos();
                    JOptionPane.showMessageDialog(null, "Cliente #"+id+" removido com sucesso!");
                } else {
                    JOptionPane.showMessageDialog(null, "O Cliente #"+id+" tem uma Ordem de Serviço requisitada, portanto, não pode ser excluído!");
                }
            } catch (SQLException ex) {
                Logger.getLogger(home.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Selecione um Cliente antes de Editar!");
        }
    }//GEN-LAST:event_btnClienteExcluirActionPerformed

    private void btnClienteCadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClienteCadastrarActionPerformed
        if (preenchidosCampos()) {
            String nome = txtClienteNome.getText();
            String cpf = txtClienteCpf.getText();
            String rg = txtClienteRg.getText();
            String endereco = txtClienteEndereco.getText();
            String telefone = txtClienteTelefone.getText();
            String telefone_alternativo = txtClienteTelefone2.getText();
            String data_cadastro = Moment.getDate();
            
            try {
                ClienteDAO cDAO = new ClienteDAO();
                ClienteModel cm = new ClienteModel();
                
                cm.setRg(rg);
                cm.setCpf(cpf);
                cm.setEndereco(endereco);
                cm.setTelefone(telefone);
                cm.setNome(nome);
                cm.setTelefone_alternativo(telefone_alternativo);
                cm.setData_cadastro(data_cadastro);
                
                cDAO.cadastrarClientes(cm);
                preenchertblClientes();
                JOptionPane.showMessageDialog(null, "Cliente "+nome+" cadastrado com sucesso!");
                limparCampos();
            } catch (SQLException ex) {
                Logger.getLogger(home.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            limparCampos();
        } else {
            JOptionPane.showMessageDialog(null, "Preencha todos os Campos!");
        }
    }//GEN-LAST:event_btnClienteCadastrarActionPerformed

    private void btnClieneAlterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClieneAlterarActionPerformed
        String id = txtClienteId.getText();
        
        if (preenchidosCampos() && !id.equals("")) {
            String nome = txtClienteNome.getText();
            String cpf = txtClienteCpf.getText();
            String rg = txtClienteRg.getText();
            String endereco = txtClienteEndereco.getText();
            String telefone = txtClienteTelefone.getText();
            String telefone_alternativo = txtClienteTelefone2.getText();
            String data_cadastro = dataC;
            
            try {
                ClienteDAO cDAO = new ClienteDAO();
                ClienteModel cm = new ClienteModel();
                
                cm.setId(id);
                cm.setRg(rg);
                cm.setCpf(cpf);
                cm.setEndereco(endereco);
                cm.setTelefone(telefone);
                cm.setNome(nome);
                cm.setTelefone_alternativo(telefone_alternativo);
                cm.setData_cadastro(data_cadastro);
                
                tblClientes.setValueAt(id, tblClientes.getSelectedRow(), 0);
                tblClientes.setValueAt(nome, tblClientes.getSelectedRow(), 1);
                tblClientes.setValueAt(cpf, tblClientes.getSelectedRow(), 2);
                tblClientes.setValueAt(rg, tblClientes.getSelectedRow(), 3);
                tblClientes.setValueAt(endereco, tblClientes.getSelectedRow(), 4);
                tblClientes.setValueAt(telefone, tblClientes.getSelectedRow(), 5);
                tblClientes.setValueAt(telefone_alternativo, tblClientes.getSelectedRow(), 6);
                tblClientes.setValueAt(data_cadastro, tblClientes.getSelectedRow(), 7);
                
                JOptionPane.showMessageDialog(null, "Cliente #"+id+" editado com sucesso!");
                
                cDAO.editarClientes(cm);
                limparCampos();
            } catch (SQLException ex) {
                Logger.getLogger(home.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Selecione um Cliente antes de Editar!");
        }
        
    }//GEN-LAST:event_btnClieneAlterarActionPerformed

    private void txtOSNomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtOSNomeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtOSNomeActionPerformed

    private void txtOSOrcamentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtOSOrcamentoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtOSOrcamentoActionPerformed

    private void txtOSStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtOSStatusActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtOSStatusActionPerformed

    private void btnOSCadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOSCadastrarActionPerformed
        if (preenchidosCamposOS()) {
            String nome = txtOSNome.getText();
            String cliente = String.valueOf(getOSId());
            String orcamento = txtOSOrcamento.getText();
            String caracteristicas = txtOSCaracteristicas.getText();
            String defeitos = txtOSDefeitos.getText();
            String status = IDHolderSR.get(txtOSStatus.getSelectedIndex());
            System.out.println(status);
            String data_cadastro = Moment.getDate();
            
            try {
                OrdemDAO oDAO = new OrdemDAO();
                OrdemModel om = new OrdemModel();
                
                om.setNome(nome);
                om.setCliente(cliente);
                om.setOrcamento(orcamento);
                om.setCaracteristicas(caracteristicas);
                om.setDefeitos(defeitos);
                om.setStatus(status);
                om.setData_cadastro(data_cadastro);

                JOptionPane.showMessageDialog(null, "OS #"+nome+" criada com sucesso!");
                
                oDAO.cadastrarOrdens(om);
                preenchertblOS();
                limparCamposOS();
            } catch (SQLException ex) {
                Logger.getLogger(home.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Preencha todos os Campos!");
        }
    }//GEN-LAST:event_btnOSCadastrarActionPerformed

    private void btnOSEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOSEditarActionPerformed
        String id = txtOSId.getText();
        
        if (preenchidosCamposOS() && !id.equals("")) {
            String nome = txtOSNome.getText();
            String cliente = String.valueOf(getOSId());
            String orcamento = txtOSOrcamento.getText();
            String caracteristicas = txtOSCaracteristicas.getText();
            String defeitos = txtOSDefeitos.getText();
            String status = IDHolderSR.get(txtOSStatus.getSelectedIndex());
            String data_cadastro = dataO;
            
            try {
                OrdemDAO oDAO = new OrdemDAO();
                OrdemModel om = new OrdemModel();
                
                om.setId(id);
                om.setNome(nome);
                om.setCliente(cliente);
                om.setOrcamento(orcamento);
                om.setCaracteristicas(caracteristicas);
                om.setDefeitos(defeitos);
                om.setStatus(status);
                om.setData_cadastro(data_cadastro);
                
                tblOrdens.setValueAt(id, tblOrdens.getSelectedRow(), 0);
                tblOrdens.setValueAt(nome, tblOrdens.getSelectedRow(), 1);
                tblOrdens.setValueAt(cliente, tblOrdens.getSelectedRow(), 2);
                tblOrdens.setValueAt(orcamento, tblOrdens.getSelectedRow(), 3);
                tblOrdens.setValueAt(caracteristicas, tblOrdens.getSelectedRow(), 4);
                tblOrdens.setValueAt(defeitos, tblOrdens.getSelectedRow(), 5);
                tblOrdens.setValueAt(status, tblOrdens.getSelectedRow(), 6);
                tblOrdens.setValueAt(data_cadastro, tblOrdens.getSelectedRow(), 7);
                
                JOptionPane.showMessageDialog(null, "OS #"+id+" editada com sucesso!");
                
                oDAO.editarOrdens(om);
                limparCamposOS();
            } catch (SQLException ex) {
                Logger.getLogger(home.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Selecione uma OS antes de Editar!");
        }
    }//GEN-LAST:event_btnOSEditarActionPerformed

    private void btnOSExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOSExcluirActionPerformed
        String id = txtOSId.getText();
        if (!id.equals("")) {
            try {
                OrdemDAO oDAO = new OrdemDAO();
                int result = oDAO.apagarOrdens(id);
                
                if (result > 0) {
                    DefaultTableModel tblOrdem = (DefaultTableModel) tblOrdens.getModel();
                    
                    tblOrdem.removeRow(tblOrdens.getSelectedRow());
                    limparCamposOS();
                    JOptionPane.showMessageDialog(null, "OS #"+id+" removida com sucesso!");
                } else {
                    JOptionPane.showMessageDialog(null, "Ocorreu algum problema com a OS #"+id+"!");
                }
            } catch (SQLException ex) {
                Logger.getLogger(home.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Selecione um Cliente antes de Editar!");
        }
    }//GEN-LAST:event_btnOSExcluirActionPerformed

    private void btnOSImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOSImprimirActionPerformed
        String id = txtOSId.getText();
        String data = Moment.getDate();
        if (!id.equals("")) {
            try {
                OrdemDAO oDAO = new OrdemDAO();
                ClienteDAO cDAO = new ClienteDAO();
                OrdemModel om = oDAO.listarOrdem(id);
                ClienteModel cm = cDAO.listarCliente(om.getCliente());
                
                Document doc = new Document();
        
                try {
                    JFileChooser f = new JFileChooser();
                    f.setDialogTitle("Selecione um Diretório para Salvar o Relatório");
                    f.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY); 
                    f.showSaveDialog(null);

                    String dir = f.getSelectedFile().toString();
                    
                    if (!dir.isEmpty()) {
                        PdfWriter.getInstance(doc, new FileOutputStream(dir+"/Ordem de Servico #"+id+".pdf"));
                        Paragraph title = new Paragraph("Ordem de Serviço #"+id+" - Gerado em: ("+data+")");
                        title.setAlignment(1);
                        
                        doc.open();
                        doc.add(title);

                        Paragraph p = new Paragraph ("Dados do Cliente: ");
                        doc.add(p);
                        
                        PdfPTable tableC = new PdfPTable(4);
                        
                        PdfPCell cel1 = new PdfPCell ( new Paragraph ("Nome:") );
                        PdfPCell cel2 = new PdfPCell ( new Paragraph (cm.getNome()) );
                        PdfPCell cel3 = new PdfPCell ( new Paragraph ("CPF:") );
                        PdfPCell cel4 = new PdfPCell ( new Paragraph (cm.getCpf()) );
                        
                        tableC.addCell(cel1); tableC.addCell(cel2); tableC.addCell(cel3); tableC.addCell(cel4);
                        
                        cel1 = new PdfPCell ( new Paragraph ("Endereço:") );
                        cel2 = new PdfPCell ( new Paragraph (cm.getEndereco()) );
                        cel3 = new PdfPCell ( new Paragraph ("RG:") );
                        cel4 = new PdfPCell ( new Paragraph (cm.getRg()) );
                        
                        tableC.addCell(cel1); tableC.addCell(cel2); tableC.addCell(cel3); tableC.addCell(cel4);
                        
                        cel1 = new PdfPCell ( new Paragraph ("Telefone 1:") );
                        cel2 = new PdfPCell ( new Paragraph (cm.getTelefone()) );
                        cel3 = new PdfPCell ( new Paragraph ("Telefone 2:") );
                        cel4 = new PdfPCell ( new Paragraph (cm.getTelefone_alternativo()) );
                        
                        tableC.addCell(cel1); tableC.addCell(cel2); tableC.addCell(cel3); tableC.addCell(cel4);
                        doc.add(tableC);

                        p = new Paragraph ("Dados do Equipamento: ");
                        doc.add(p);
                        
                        tableC = new PdfPTable(2);
                        
                        cel1 = new PdfPCell ( new Paragraph ("Nome:") );
                        cel2 = new PdfPCell ( new Paragraph (om.getNome()) );
                        tableC.addCell(cel1); tableC.addCell(cel2);
                        
                        cel3 = new PdfPCell ( new Paragraph ("Orçamento:") );
                        cel4 = new PdfPCell ( new Paragraph ("R$ "+om.getOrcamento()) );
                        tableC.addCell(cel3); tableC.addCell(cel4);
                        
                        cel1 = new PdfPCell ( new Paragraph ("Características:") );
                        cel2 = new PdfPCell ( new Paragraph (om.getCaracteristicas()) );
                        
                        tableC.addCell(cel1); tableC.addCell(cel2);
                        
                        cel3 = new PdfPCell ( new Paragraph ("Defeitos:") );
                        cel4 = new PdfPCell ( new Paragraph (om.getDefeitos()) );
                        
                        tableC.addCell(cel3); tableC.addCell(cel4);
                        doc.add(tableC);
                        
                        p = new Paragraph ("Entrada: "+om.getData_cadastro());
                        doc.add(p);
                        
                        p = new Paragraph ("Saída: ___/___/____ __:__:__");
                        doc.add(p);
                        
                        p = new Paragraph ("Status: "+om.getStatus());
                        doc.add(p);
                        
                        p = new Paragraph ("Assinatura do Cliente: ___________________________________");
                        doc.add(p);
                        
                        p = new Paragraph ("Assinatura do Técnico: ___________________________________");
                        doc.add(p);
                        
                        JOptionPane.showMessageDialog(null, "Relatório de OS gerado com sucesso!");
                    } else {
                        JOptionPane.showMessageDialog(null, "Operação cancelada!");
                    }
                } catch (FileNotFoundException | DocumentException ex) {
                    Logger.getLogger(home.class.getName()).log(Level.SEVERE, null, ex);
                } finally {
                    doc.close();
                }
            } catch (SQLException ex) {
                Logger.getLogger(home.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Selecione uma OS para gerar o Relatório!");
        }
    }//GEN-LAST:event_btnOSImprimirActionPerformed

    private void btnOSLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOSLimparActionPerformed
        limparCamposOS();
    }//GEN-LAST:event_btnOSLimparActionPerformed

    private void tblOrdensMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblOrdensMouseClicked
        txtOSId.setText(tblOrdens.getValueAt(tblOrdens.getSelectedRow(), 0).toString());
        txtOSNome.setText(tblOrdens.getValueAt(tblOrdens.getSelectedRow(), 1).toString());
        txtOSCliente.setSelectedIndex(getOSIdPorCliente(Integer.parseInt(tblOrdens.getValueAt(tblOrdens.getSelectedRow(), 2).toString())));
        txtOSOrcamento.setText(tblOrdens.getValueAt(tblOrdens.getSelectedRow(), 3).toString());
        txtOSCaracteristicas.setText(tblOrdens.getValueAt(tblOrdens.getSelectedRow(), 4).toString());
        txtOSDefeitos.setText(tblOrdens.getValueAt(tblOrdens.getSelectedRow(), 5).toString());
        txtOSStatus.setSelectedIndex(IDHolderS.get(tblOrdens.getValueAt(tblOrdens.getSelectedRow(), 6).toString()));
        dataO = tblOrdens.getValueAt(tblOrdens.getSelectedRow(), 7).toString();
    }//GEN-LAST:event_tblOrdensMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new home().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClieneAlterar;
    private javax.swing.JButton btnClienteCadastrar;
    private javax.swing.JButton btnClienteExcluir;
    private javax.swing.JButton btnClienteLimpar;
    private javax.swing.JButton btnOSCadastrar;
    private javax.swing.JButton btnOSEditar;
    private javax.swing.JButton btnOSExcluir;
    private javax.swing.JButton btnOSImprimir;
    private javax.swing.JButton btnOSLimpar;
    private javax.swing.JPanel inicio;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JPanel listarClientes;
    private javax.swing.JPanel listarOS;
    private javax.swing.JTable tblClientes;
    private javax.swing.JTable tblOrdens;
    private javax.swing.JFormattedTextField txtClienteCpf;
    private javax.swing.JTextField txtClienteEndereco;
    private javax.swing.JLabel txtClienteId;
    private javax.swing.JTextField txtClienteNome;
    private javax.swing.JFormattedTextField txtClienteRg;
    private javax.swing.JFormattedTextField txtClienteTelefone;
    private javax.swing.JFormattedTextField txtClienteTelefone2;
    private javax.swing.JTextArea txtOSCaracteristicas;
    private javax.swing.JComboBox<String> txtOSCliente;
    private javax.swing.JTextArea txtOSDefeitos;
    private javax.swing.JLabel txtOSId;
    private javax.swing.JTextField txtOSNome;
    private javax.swing.JTextField txtOSOrcamento;
    private javax.swing.JComboBox<String> txtOSStatus;
    private javax.swing.JPanel verOS;
    private javax.swing.JPanel verOSCliente;
    // End of variables declaration//GEN-END:variables
}
